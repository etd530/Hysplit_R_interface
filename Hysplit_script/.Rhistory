# "flat" geometry so this is NOT correct right now!!! just making the layout of the code)
traj$dist <- sqrt(abs(traj$lat-coord[[2]][1])^2+abs(traj$lon-coord[[2]][2])^2)
traj$angle <- atan(abs(traj$lat-coord[[2]][1])/abs(traj$lon-coord[[2]][2]))
#we take out values for the starting points, as they are still at the origin so distance is zero and it makes no sense to calculate an angle
traj$dist[traj$hour.inc==0] <- NA
traj$angle[traj$hour.inc==0] <- NA
#library(clifro)
#organize a data frame with angle in degrees and distance from origin
df<-data.frame(180*traj$angle/pi, traj$dist)
colnames(df) <- c("deg", "dist")
df <- df[!is.na(df$deg),]
#rescale data into 12 "slices" of 30 degrees each
ls<-seq(15,345, 30)
for (i in 1:(length(ls)-1)) {
df$deg[df$deg>ls[i] & df$deg<ls[i+1]] <- mean(c(ls[i],ls[i+1]))
}
df$deg[df$deg>345 & df$deg<360] <- 0
df$deg[df$deg>0 & df$deg<15] <- 0
df$count <- 1
library(circular)
library(ggplot2)
ggplot(data=df, aes(x=deg, y=count)) + geom_bar(stat='identity') +
coord_polar(start = 2 * pi - pi/12, clip = "off") + ggtitle("Wind directions") +
theme(plot.title = element_text(hjust = 0.5))
clifro::windrose(speed = df$count,
direction = df$deg,
speed_cuts = seq(0,25,5),
ggtheme='minimal') + ggtitle("Wind directions") + theme(plot.title = element_text(hjust = 0.5))
grays <- colorRampPalette(c("light green", "green", "greenyellow",
"yellow", "orange", "orangered", "red"))(10)
grays <- colorRampPalette(c("light green", "green", "greenyellow",
"yellow", "orange", "orangered", "red"))(100)
grays <- colorRampPalette(c("yellow", "orange", "orangered", "red"))(10)
#### Load packages ####
library(splitr)
library(opentraj)
library(lubridate)
#### Variables for the runs ####
dayList <- c(1:31)                          # put the days of the month here, without caring about short months
monthList <- c(03)                      # months go here
yearList <- c(2000)                    # years
dayblocks <- list(c(01:15), c(16:31))       # Set the blocks of days you want to run together to plot in the same map
coord <- list(c(41.308811, 2.112405),       # coordinates
c(36.885601, -6.360097))
height <- 500                               # height of the winds at starting point
duration <- -48                             # how long fowrwards or backwards should the run go
times <- list(c("12:00", "12:00"))          # first and last hour on which the trajectories should start (put the same to run just at one hour)
hourInt <- 1                                # at which intervals should you start new trajectories (every 2 hours, etc.)
#modified version of PlotTrajFreq, so that we can change the scale of the plot and the color scale (I did not find a way to do it directly, it seemed to be hardcoded)
plotRaster=function (spGridDf, background = T, overlay = NA, overlay.color = "white",
pdf = F, file.name = "output", ...)
{
if (pdf == T) {
pdf(file.name, paper = "USr", height = 0, width = 0)
}
oldpar <- par(no.readonly = TRUE)
par(mar = c(0, 0, 0, 0) + 2)
plot.add <- F
extra.args <- list(...)
if (!"main" %in% names(extra.args)) {
extra.args$main <- NULL
}
if (background == T) {
bb <- bbox(spGridDf)
PlotBgMap(spGridDf, xlim = bb[1, ], ylim = bb[2, ],
axes = TRUE)
grid(col = "white")
plot.add <- T
}
grays <- colorRampPalette(c("yellow", "orange", "orangered", "red"))(10)
image(spGridDf, col = grays, breaks = (c(0, 0.01, 0.02, 0.03,
0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1)), add = plot.add)
legend("topleft", legend = c("0.00 - 0.01", "0.01 - 0.02", "0.02 - 0.03",
"0.03 - 0.04", "0.04 - 0.05", "0.05 - 0.06", "0.06 - 0.07",
"0.07 - 0.08", "0.08 - 0.09", "0.09 - 0.1"), fill = grays)
do.call(title, extra.args)
if (!missing(overlay)) {
plot(overlay, add = T, col = "black", border = "black")
}
par(oldpar)
if (pdf == T) {
dev.off()
}
}
# Creating the list with the days of interest ####
dateList <- as.vector(5) # just creating a vector
for(i in 1:length(yearList)) {
for (j in 1:length(monthList)) {
for (k in 1:length(dayList)) {
dateList[length(dayList)*length(monthList)*(i-1)+length(dayList)*(j-1)+k] <- as.character(paste(yearList[i], monthList[j], dayList[k], sep = "-"))
}
}
} # this loop generates the dates
dateList <- as.Date(dateList) # change from strings to Date objects
dateList <- na.omit(dateList) # remove NAs (i.e. remove impossible dates such as February 31)
# Generate list with the dates of the previous month
prevDates <- seq.Date(if (monthList[1]==01) as.Date(paste(yearList[1]-1, "12", "01", sep="-"), "%Y-%m-%d", tz = "CET")
else as.Date(paste(yearList[1], monthList[1]-1, "01", sep="-"), "%Y-%m-%d", tz = "CET"), # initial date
if (monthList[1]==01) as.Date(paste(yearList[length(yearList)]-1, "12", "01", sep="-"), "%Y-%m-%d", tz = "CET")
else as.Date(paste(yearList[length(yearList)], monthList[1]-1, "01", sep="-"), "%Y-%m-%d", tz = "CET"), # final date
by = "year",                                   # interval
length.out = NULL)                             # period length
# Get meteorological files:
# I think with the loop is better because if you put the whole list directly in the "days" argument it seems to go over all the months in the middle
# and download unnecessary files
for(i in 1:length(prevDates)) {
get_met_reanalysis(days = prevDates[i], duration = 12, direction = "forward",
path_met_files = "C:/hysplit/working")
}
# Generate list with dates of next month
postDates <- seq.Date(if (monthList[length(monthList)]==12) as.Date(paste(yearList[1]+1, "01", "01", sep = "-"), "%Y-%m-%d", tz = "CET")
else as.Date(paste(yearList[1], monthList[length(monthList)]+1, "01", sep = "-"), "%Y-%m-%d", tz = "CET"), # initial date
if (monthList[length(monthList)]==12) as.Date(paste(yearList[length(yearList)]+1, "01","01", sep = "-"), "%Y-%m-%d", tz = "CET")
else as.Date(paste(yearList[length(yearList)], monthList[length(monthList)]+1,"01", sep = "-"), "%Y-%m-%d", tz = "CET"), # final date
by = "year",                                   # interval
length.out = NULL)                             # period length
# Get the files; as before the loop should save time
for(i in 1:length(postDates)) {
get_met_reanalysis(days = postDates[i], duration = 12, direction = "forward",
path_met_files = "C:/hysplit/working")
}
# Get the files for the dates of interest; since the files are by month it does not matter here if the list has more days than needed, it will skip files already downloaded
for(i in 1:length(dateList)) {
get_met_reanalysis(days = dateList[i], duration = 48, direction = "backward",
path_met_files = "C:/hysplit/working")
}
# Calculate trajectories ####
library(raster) #needed for the lines that change the raster values, from maxValue until setValues
library(here)
pdf(here("Winds_raster.pdf"))
#png(here("Winds_raster.png"), height=1000, width=700, res=600)
#par(mfcol=c(2,2))
for (n in coord){
for (i in monthList){
for (j in dayblocks){
#Calculate the trajectory
traj<-ProcTraj(lat = n[1], lon = n[2],
hour.interval = hourInt, name = "traj", start.hour = times[[1]][1], end.hour = times[[1]][2],
met = "C:/hysplit/working/", out = "C:/hysplit/working/Out_files/", hours = duration, height = height,
hy.path = "C:/hysplit/", dates = dateList[month(dateList)==i & day(dateList) %in% j], tz = "CET")
# Plot calculated trajectories in a map
traj_lines<-Df2SpLines(traj, crs = "+proj=longlat +datum=NAD27") #here I just took the crs value from the documentation example as I am not familiar with datums and all that, it may need to be changed
traj_lines_df<-Df2SpLinesDf(traj_lines, traj, add.distance = T, add.azimuth = T) #this line is not really needed but it may be useful for other things
# pdf(here("Winds_map.pdf"))
# PlotTraj(traj_lines_df) #plots the trajectories in a map
# dev.off()
#generates a raster, where each cell has the number of trajectories that pass through it
traj_freq<- RasterizeTraj(traj_lines, parallel = F) #switch to parallel=T to calculate in parallel, but with very few trajectories (less than 8 I think)
#it won't work
# these lines change the absolute number of trajectories to relative number (i.e. from 0 to 1)
max.val <- maxValue(traj_freq)        #gets the max value of the raster
v <- getValues(traj_freq)             #gets all values of the raster
v <- v/max.val                        #divides the values
traj_freq <- setValues(traj_freq, v)  #passes the new values to the raster
max.val<-maxValue(traj_freq)          #get the (new) max value
breaks<-seq(0, max.val, max.val/10)   #this will set the scale of the plot
#plot the rasterized trajectories
traj_grid<-as(traj_freq, "SpatialGridDataFrame")  #creates object of the necessary type for the package
plotRaster(traj_grid, main = paste(month.name[i], j[1], "to", month.name[i], j[length(j)], yearList[1], "-", yearList[length(yearList)], sep = " ")) #plots the raster
}
}
}
dev.off()
#### Variables for the runs ####
dayList <- c(1:31)                          # put the days of the month here, without caring about short months
monthList <- c(03)                      # months go here
yearList <- c(2000:2020)                    # years
dayblocks <- list(c(01:15), c(16:31))       # Set the blocks of days you want to run together to plot in the same map
coord <- list(c(41.308811, 2.112405),       # coordinates
c(36.885601, -6.360097))
height <- 500                               # height of the winds at starting point
duration <- -48                             # how long fowrwards or backwards should the run go
times <- list(c("12:00", "12:00"))          # first and last hour on which the trajectories should start (put the same to run just at one hour)
hourInt <- 1                                # at which intervals should you start new trajectories (every 2 hours, etc.)
#modified version of PlotTrajFreq, so that we can change the scale of the plot and the color scale (I did not find a way to do it directly, it seemed to be hardcoded)
plotRaster=function (spGridDf, background = T, overlay = NA, overlay.color = "white",
pdf = F, file.name = "output", ...)
{
if (pdf == T) {
pdf(file.name, paper = "USr", height = 0, width = 0)
}
oldpar <- par(no.readonly = TRUE)
par(mar = c(0, 0, 0, 0) + 2)
plot.add <- F
extra.args <- list(...)
if (!"main" %in% names(extra.args)) {
extra.args$main <- NULL
}
if (background == T) {
bb <- bbox(spGridDf)
PlotBgMap(spGridDf, xlim = bb[1, ], ylim = bb[2, ],
axes = TRUE)
grid(col = "white")
plot.add <- T
}
grays <- colorRampPalette(c("yellow", "orange", "orangered", "red"))(10)
image(spGridDf, col = grays, breaks = (c(0, 0.01, 0.02, 0.03,
0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1)), add = plot.add)
legend("topleft", legend = c("0.00 - 0.01", "0.01 - 0.02", "0.02 - 0.03",
"0.03 - 0.04", "0.04 - 0.05", "0.05 - 0.06", "0.06 - 0.07",
"0.07 - 0.08", "0.08 - 0.09", "0.09 - 0.1"), fill = grays)
do.call(title, extra.args)
if (!missing(overlay)) {
plot(overlay, add = T, col = "black", border = "black")
}
par(oldpar)
if (pdf == T) {
dev.off()
}
}
# Creating the list with the days of interest ####
dateList <- as.vector(5) # just creating a vector
for(i in 1:length(yearList)) {
for (j in 1:length(monthList)) {
for (k in 1:length(dayList)) {
dateList[length(dayList)*length(monthList)*(i-1)+length(dayList)*(j-1)+k] <- as.character(paste(yearList[i], monthList[j], dayList[k], sep = "-"))
}
}
} # this loop generates the dates
dateList <- as.Date(dateList) # change from strings to Date objects
dateList <- na.omit(dateList) # remove NAs (i.e. remove impossible dates such as February 31)
# Generate list with the dates of the previous month
prevDates <- seq.Date(if (monthList[1]==01) as.Date(paste(yearList[1]-1, "12", "01", sep="-"), "%Y-%m-%d", tz = "CET")
else as.Date(paste(yearList[1], monthList[1]-1, "01", sep="-"), "%Y-%m-%d", tz = "CET"), # initial date
if (monthList[1]==01) as.Date(paste(yearList[length(yearList)]-1, "12", "01", sep="-"), "%Y-%m-%d", tz = "CET")
else as.Date(paste(yearList[length(yearList)], monthList[1]-1, "01", sep="-"), "%Y-%m-%d", tz = "CET"), # final date
by = "year",                                   # interval
length.out = NULL)                             # period length
# Get meteorological files:
# I think with the loop is better because if you put the whole list directly in the "days" argument it seems to go over all the months in the middle
# and download unnecessary files
for(i in 1:length(prevDates)) {
get_met_reanalysis(days = prevDates[i], duration = 12, direction = "forward",
path_met_files = "C:/hysplit/working")
}
# Generate list with dates of next month
postDates <- seq.Date(if (monthList[length(monthList)]==12) as.Date(paste(yearList[1]+1, "01", "01", sep = "-"), "%Y-%m-%d", tz = "CET")
else as.Date(paste(yearList[1], monthList[length(monthList)]+1, "01", sep = "-"), "%Y-%m-%d", tz = "CET"), # initial date
if (monthList[length(monthList)]==12) as.Date(paste(yearList[length(yearList)]+1, "01","01", sep = "-"), "%Y-%m-%d", tz = "CET")
else as.Date(paste(yearList[length(yearList)], monthList[length(monthList)]+1,"01", sep = "-"), "%Y-%m-%d", tz = "CET"), # final date
by = "year",                                   # interval
length.out = NULL)                             # period length
# Get the files; as before the loop should save time
for(i in 1:length(postDates)) {
get_met_reanalysis(days = postDates[i], duration = 12, direction = "forward",
path_met_files = "C:/hysplit/working")
}
# Get the files for the dates of interest; since the files are by month it does not matter here if the list has more days than needed, it will skip files already downloaded
for(i in 1:length(dateList)) {
get_met_reanalysis(days = dateList[i], duration = 48, direction = "backward",
path_met_files = "C:/hysplit/working")
}
# Calculate trajectories ####
library(raster) #needed for the lines that change the raster values, from maxValue until setValues
library(here)
pdf(here("Winds_raster.pdf"))
#png(here("Winds_raster.png"), height=1000, width=700, res=600)
#par(mfcol=c(2,2))
for (n in coord){
for (i in monthList){
for (j in dayblocks){
#Calculate the trajectory
traj<-ProcTraj(lat = n[1], lon = n[2],
hour.interval = hourInt, name = "traj", start.hour = times[[1]][1], end.hour = times[[1]][2],
met = "C:/hysplit/working/", out = "C:/hysplit/working/Out_files/", hours = duration, height = height,
hy.path = "C:/hysplit/", dates = dateList[month(dateList)==i & day(dateList) %in% j], tz = "CET")
# Plot calculated trajectories in a map
traj_lines<-Df2SpLines(traj, crs = "+proj=longlat +datum=NAD27") #here I just took the crs value from the documentation example as I am not familiar with datums and all that, it may need to be changed
traj_lines_df<-Df2SpLinesDf(traj_lines, traj, add.distance = T, add.azimuth = T) #this line is not really needed but it may be useful for other things
# pdf(here("Winds_map.pdf"))
# PlotTraj(traj_lines_df) #plots the trajectories in a map
# dev.off()
#generates a raster, where each cell has the number of trajectories that pass through it
traj_freq<- RasterizeTraj(traj_lines, parallel = F) #switch to parallel=T to calculate in parallel, but with very few trajectories (less than 8 I think)
#it won't work
# these lines change the absolute number of trajectories to relative number (i.e. from 0 to 1)
max.val <- maxValue(traj_freq)        #gets the max value of the raster
v <- getValues(traj_freq)             #gets all values of the raster
v <- v/max.val                        #divides the values
traj_freq <- setValues(traj_freq, v)  #passes the new values to the raster
max.val<-maxValue(traj_freq)          #get the (new) max value
breaks<-seq(0, max.val, max.val/10)   #this will set the scale of the plot
#plot the rasterized trajectories
traj_grid<-as(traj_freq, "SpatialGridDataFrame")  #creates object of the necessary type for the package
plotRaster(traj_grid, main = paste(month.name[i], j[1], "to", month.name[i], j[length(j)], yearList[1], "-", yearList[length(yearList)], sep = " ")) #plots the raster
}
}
}
dev.off()
grays[1]
#modified version of PlotTrajFreq, so that we can change the scale of the plot and the color scale (I did not find a way to do it directly, it seemed to be hardcoded)
plotRaster=function (spGridDf, background = T, overlay = NA, overlay.color = "white",
pdf = F, file.name = "output", ...)
{
if (pdf == T) {
pdf(file.name, paper = "USr", height = 0, width = 0)
}
oldpar <- par(no.readonly = TRUE)
par(mar = c(0, 0, 0, 0) + 2)
plot.add <- F
extra.args <- list(...)
if (!"main" %in% names(extra.args)) {
extra.args$main <- NULL
}
if (background == T) {
bb <- bbox(spGridDf)
PlotBgMap(spGridDf, xlim = bb[1, ], ylim = bb[2, ],
axes = TRUE)
grid(col = "white")
plot.add <- T
}
grays <- colorRampPalette(c("yellow", "orange", "orangered", "red"))(10) #names are color range, number is how many colors to generate
grays[11] <- "#00FFFFFF"
grays[12] <- "#FF000000"
#if you change the number of colors in the previous line you must change breaks and legend accordingly
image(spGridDf, col = grays, breaks = (c(0, 0.01, 0.02, 0.03,
0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.99, 1)), add = plot.add)
legend("topleft", legend = c("0.00 - 0.01", "0.01 - 0.02", "0.02 - 0.03",
"0.03 - 0.04", "0.04 - 0.05", "0.05 - 0.06", "0.06 - 0.07",
"0.07 - 0.08", "0.08 - 0.09", "0.09 - 0.1"), fill = grays)
do.call(title, extra.args)
if (!missing(overlay)) {
plot(overlay, add = T, col = "black", border = "black")
}
par(oldpar)
if (pdf == T) {
dev.off()
}
}
plotRaster(traj_grid, main = paste(month.name[i], j[1], "to", month.name[i], j[length(j)], yearList[1], "-", yearList[length(yearList)], sep = " ")) #plots the raster
pdf(here("Winds_raster.pdf"))
pdf(here("Winds_raster.pdf"))
plotRaster(traj_grid, main = paste(month.name[i], j[1], "to", month.name[i], j[length(j)], yearList[1], "-", yearList[length(yearList)], sep = " ")) #plots the raster
dev.off()
dev.off()
remove(grays)
grays <- colorRampPalette(c("yellow", "orange", "orangered", "red"))(10) #names are color range, number is how many colors to generate
grays[11] <- "#00FFFFFF"
grays[12] <- "#000000"
remove(grays)
#modified version of PlotTrajFreq, so that we can change the scale of the plot and the color scale (I did not find a way to do it directly, it seemed to be hardcoded)
plotRaster=function (spGridDf, background = T, overlay = NA, overlay.color = "white",
pdf = F, file.name = "output", ...)
{
if (pdf == T) {
pdf(file.name, paper = "USr", height = 0, width = 0)
}
oldpar <- par(no.readonly = TRUE)
par(mar = c(0, 0, 0, 0) + 2)
plot.add <- F
extra.args <- list(...)
if (!"main" %in% names(extra.args)) {
extra.args$main <- NULL
}
if (background == T) {
bb <- bbox(spGridDf)
PlotBgMap(spGridDf, xlim = bb[1, ], ylim = bb[2, ],
axes = TRUE)
grid(col = "white")
plot.add <- T
}
grays <- colorRampPalette(c("yellow", "orange", "orangered", "red"))(10) #names are color range, number is how many colors to generate
grays[11] <- "#FFFFFF00"
grays[12] <- "#000000"
#if you change the number of colors in the previous line you must change breaks and legend accordingly
image(spGridDf, col = grays, breaks = (c(0, 0.01, 0.02, 0.03,
0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.99, 1)), add = plot.add)
legend("topleft", legend = c("0.00 - 0.01", "0.01 - 0.02", "0.02 - 0.03",
"0.03 - 0.04", "0.04 - 0.05", "0.05 - 0.06", "0.06 - 0.07",
"0.07 - 0.08", "0.08 - 0.09", "0.09 - 0.1"), fill = grays)
do.call(title, extra.args)
if (!missing(overlay)) {
plot(overlay, add = T, col = "black", border = "black")
}
par(oldpar)
if (pdf == T) {
dev.off()
}
}
pdf(here("Winds_raster.pdf"))
pdf(here("Winds_raster.pdf"))
plotRaster(traj_grid, main = paste(month.name[i], j[1], "to", month.name[i], j[length(j)], yearList[1], "-", yearList[length(yearList)], sep = " ")) #plots the raster
dev.off()
#### Variables for the runs ####
dayList <- c(1:31)                          # put the days of the month here, without caring about short months
monthList <- c(03:05)                      # months go here
yearList <- c(2000:2020)                    # years
dayblocks <- list(c(01:15), c(16:31))       # Set the blocks of days you want to run together to plot in the same map
coord <- list(c(41.308811, 2.112405),       # coordinates
c(36.885601, -6.360097))
height <- 500                               # height of the winds at starting point
duration <- -48                             # how long fowrwards or backwards should the run go
times <- list(c("12:00", "12:00"))          # first and last hour on which the trajectories should start (put the same to run just at one hour)
hourInt <- 1                                # at which intervals should you start new trajectories (every 2 hours, etc.)
#modified version of PlotTrajFreq, so that we can change the scale of the plot and the color scale (I did not find a way to do it directly, it seemed to be hardcoded)
plotRaster=function (spGridDf, background = T, overlay = NA, overlay.color = "white",
pdf = F, file.name = "output", ...)
{
if (pdf == T) {
pdf(file.name, paper = "USr", height = 0, width = 0)
}
oldpar <- par(no.readonly = TRUE)
par(mar = c(0, 0, 0, 0) + 2)
plot.add <- F
extra.args <- list(...)
if (!"main" %in% names(extra.args)) {
extra.args$main <- NULL
}
if (background == T) {
bb <- bbox(spGridDf)
PlotBgMap(spGridDf, xlim = bb[1, ], ylim = bb[2, ],
axes = TRUE)
grid(col = "white")
plot.add <- T
}
grays <- colorRampPalette(c("yellow", "orange", "orangered", "red"))(10) #names are color range, number is how many colors to generate
grays[11] <- "#FFFFFF00"
grays[12] <- "#000000"
#if you change the number of colors in the previous line you must change breaks and legend accordingly
image(spGridDf, col = grays, breaks = (c(0, 0.01, 0.02, 0.03,
0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.99, 1)), add = plot.add)
legend("topleft", legend = c("0.00 - 0.01", "0.01 - 0.02", "0.02 - 0.03",
"0.03 - 0.04", "0.04 - 0.05", "0.05 - 0.06", "0.06 - 0.07",
"0.07 - 0.08", "0.08 - 0.09", "0.09 - 0.1"), fill = grays)
do.call(title, extra.args)
if (!missing(overlay)) {
plot(overlay, add = T, col = "black", border = "black")
}
par(oldpar)
if (pdf == T) {
dev.off()
}
}
# Creating the list with the days of interest ####
dateList <- as.vector(5) # just creating a vector
for(i in 1:length(yearList)) {
for (j in 1:length(monthList)) {
for (k in 1:length(dayList)) {
dateList[length(dayList)*length(monthList)*(i-1)+length(dayList)*(j-1)+k] <- as.character(paste(yearList[i], monthList[j], dayList[k], sep = "-"))
}
}
} # this loop generates the dates
dateList <- as.Date(dateList) # change from strings to Date objects
dateList <- na.omit(dateList) # remove NAs (i.e. remove impossible dates such as February 31)
# Generate list with the dates of the previous month
prevDates <- seq.Date(if (monthList[1]==01) as.Date(paste(yearList[1]-1, "12", "01", sep="-"), "%Y-%m-%d", tz = "CET")
else as.Date(paste(yearList[1], monthList[1]-1, "01", sep="-"), "%Y-%m-%d", tz = "CET"), # initial date
if (monthList[1]==01) as.Date(paste(yearList[length(yearList)]-1, "12", "01", sep="-"), "%Y-%m-%d", tz = "CET")
else as.Date(paste(yearList[length(yearList)], monthList[1]-1, "01", sep="-"), "%Y-%m-%d", tz = "CET"), # final date
by = "year",                                   # interval
length.out = NULL)                             # period length
# Get meteorological files:
# I think with the loop is better because if you put the whole list directly in the "days" argument it seems to go over all the months in the middle
# and download unnecessary files
for(i in 1:length(prevDates)) {
get_met_reanalysis(days = prevDates[i], duration = 12, direction = "forward",
path_met_files = "C:/hysplit/working")
}
# Generate list with dates of next month
postDates <- seq.Date(if (monthList[length(monthList)]==12) as.Date(paste(yearList[1]+1, "01", "01", sep = "-"), "%Y-%m-%d", tz = "CET")
else as.Date(paste(yearList[1], monthList[length(monthList)]+1, "01", sep = "-"), "%Y-%m-%d", tz = "CET"), # initial date
if (monthList[length(monthList)]==12) as.Date(paste(yearList[length(yearList)]+1, "01","01", sep = "-"), "%Y-%m-%d", tz = "CET")
else as.Date(paste(yearList[length(yearList)], monthList[length(monthList)]+1,"01", sep = "-"), "%Y-%m-%d", tz = "CET"), # final date
by = "year",                                   # interval
length.out = NULL)                             # period length
# Get the files; as before the loop should save time
for(i in 1:length(postDates)) {
get_met_reanalysis(days = postDates[i], duration = 12, direction = "forward",
path_met_files = "C:/hysplit/working")
}
# Get the files for the dates of interest; since the files are by month it does not matter here if the list has more days than needed, it will skip files already downloaded
for(i in 1:length(dateList)) {
get_met_reanalysis(days = dateList[i], duration = 48, direction = "backward",
path_met_files = "C:/hysplit/working")
}
# Calculate trajectories ####
library(raster) #needed for the lines that change the raster values, from maxValue until setValues
library(here)
pdf(here("Winds_raster.pdf"))
#png(here("Winds_raster.png"), height=1000, width=700, res=600)
#par(mfcol=c(2,2))
for (n in coord){
for (i in monthList){
for (j in dayblocks){
#Calculate the trajectory
traj<-ProcTraj(lat = n[1], lon = n[2],
hour.interval = hourInt, name = "traj", start.hour = times[[1]][1], end.hour = times[[1]][2],
met = "C:/hysplit/working/", out = "C:/hysplit/working/Out_files/", hours = duration, height = height,
hy.path = "C:/hysplit/", dates = dateList[month(dateList)==i & day(dateList) %in% j], tz = "CET")
# Plot calculated trajectories in a map
traj_lines<-Df2SpLines(traj, crs = "+proj=longlat +datum=NAD27") #here I just took the crs value from the documentation example as I am not familiar with datums and all that, it may need to be changed
traj_lines_df<-Df2SpLinesDf(traj_lines, traj, add.distance = T, add.azimuth = T) #this line is not really needed but it may be useful for other things
# pdf(here("Winds_map.pdf"))
# PlotTraj(traj_lines_df) #plots the trajectories in a map
# dev.off()
#generates a raster, where each cell has the number of trajectories that pass through it
traj_freq<- RasterizeTraj(traj_lines, parallel = F) #switch to parallel=T to calculate in parallel, but with very few trajectories (less than 8 I think)
#it won't work
# these lines change the absolute number of trajectories to relative number (i.e. from 0 to 1)
max.val <- maxValue(traj_freq)        #gets the max value of the raster
v <- getValues(traj_freq)             #gets all values of the raster
v <- v/max.val                        #divides the values
traj_freq <- setValues(traj_freq, v)  #passes the new values to the raster
max.val<-maxValue(traj_freq)          #get the (new) max value
breaks<-seq(0, max.val, max.val/10)   #this will set the scale of the plot
#plot the rasterized trajectories
traj_grid<-as(traj_freq, "SpatialGridDataFrame")  #creates object of the necessary type for the package
plotRaster(traj_grid, main = paste(month.name[i], j[1], "to", month.name[i], j[length(j)], yearList[1], "-", yearList[length(yearList)], sep = " ")) #plots the raster
}
}
}
dev.off()
